NAME: grafana-1647753779
LAST DEPLOYED: Sun Mar 20 06:23:00 2022
NAMESPACE: default
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: grafana-1647753779-test
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
  namespace: default
spec:
  serviceAccountName: grafana-1647753779-test
  containers:
    - name: grafana-1647753779-test
      image: "bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
  - name: tests
    configMap:
      name: grafana-1647753779-test
  restartPolicy: Never
MANIFEST:
---
# Source: grafana/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: grafana-1647753779
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    # Default set from Docker, with DAC_OVERRIDE and CHOWN
      - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'csi'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
# Source: grafana/templates/tests/test-podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: grafana-1647753779-test
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
spec:
  allowPrivilegeEscalation: true
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - projected
  - csi
  - secret
---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
  name: grafana-1647753779
  namespace: default
---
# Source: grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
  name: grafana-1647753779-test
  namespace: default
---
# Source: grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "eWZtcHJXVXU0ZUdRdGR2bWo4V29Uam1meXpnc1BvR2NkV0VDenNnWA=="
  ldap-toml: ""
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
data:
  plugins: digrich-bubblechart-panel,grafana-clock-panel
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
# Source: grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-1647753779-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://grafana-1647753779/api/health"

      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
  name: grafana-1647753779-clusterrole
rules: []
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-1647753779-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: grafana-1647753779
    namespace: default
roleRef:
  kind: ClusterRole
  name: grafana-1647753779-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [grafana-1647753779]
---
# Source: grafana/templates/tests/test-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-1647753779-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['policy']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [grafana-1647753779-test]
---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-1647753779
subjects:
- kind: ServiceAccount
  name: grafana-1647753779
  namespace: default
---
# Source: grafana/templates/tests/test-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-1647753779-test
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-1647753779-test
subjects:
- kind: ServiceAccount
  name: grafana-1647753779-test
  namespace: default
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000

  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-1647753779
  namespace: default
  labels:
    helm.sh/chart: grafana-6.24.1
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-1647753779
    app.kubernetes.io/version: "8.4.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana-1647753779
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: grafana-1647753779
      annotations:
        checksum/config: 8ef705bab44306c03f2bebed502b71c7dd40e7b2ea7ee74265434d89cc556a9b
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: ff27eb3e82f0713af411d0d0b675e4f775c9c38497da0bb7d95b94f7f13837b5
    spec:
      
      serviceAccountName: grafana-1647753779
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "grafana/grafana:8.4.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-1647753779
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-1647753779
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: grafana-1647753779
                  key: plugins
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: grafana-1647753779
        - name: storage
          emptyDir: {}

NOTES:
1. Get your 'admin' user password by running:

   kubectl get secret --namespace default grafana-1647753779 -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:

   grafana-1647753779.default.svc.cluster.local

   Get the Grafana URL to visit by running these commands in the same shell:

     export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana-1647753779" -o jsonpath="{.items[0].metadata.name}")
     kubectl --namespace default port-forward $POD_NAME 3000

3. Login with the password from step 1 and the username: admin
#################################################################################
######   WARNING: Persistence is disabled!!! You will lose your data when   #####
######            the Grafana pod is terminated.                            #####
#################################################################################
