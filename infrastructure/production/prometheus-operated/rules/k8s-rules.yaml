apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: k8s-rules
  name: k8s-rules
  namespace: monitoring
spec:
  groups:
    - name: pod-resource-consumption-rules
      rules:
      - record: namespace:container_cpu_usage_seconds_total:sum_rate
        expr: sum by(namespace) (rate(container_cpu_usage_seconds_total{container!="",image!="",job="kubernetes-nodes-cadvisor"}[5m]))
      - record: namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
        expr: sum by(namespace, pod, container) (rate(container_cpu_usage_seconds_total{container!="",image!="",job="kubernetes-nodes-cadvisor"}[5m]))
      - record: namespace:container_memory_usage_bytes:sum
        expr: sum by(namespace) (container_memory_usage_bytes{container!="",image!="",job="kubernetes-nodes-cadvisor"})
      - record: namespace_name:container_cpu_usage_seconds_total:sum_rate
        expr: sum by(namespace, label_name) (sum by(namespace, pod) (rate(container_cpu_usage_seconds_total{container!="",image!="",job="kubernetes-nodes-cadvisor"}[5m])) * on(namespace, pod) group_left(label_name) label_replace(kube_pod_labels{job="kube-state-metrics"}, "pod", "$1", "pod", "(.*)"))
      - record: namespace_name:container_memory_usage_bytes:sum
        expr: sum by(namespace, label_name) (sum by(pod, namespace) (container_memory_usage_bytes{container!="",image!="",job="kubernetes-nodes-cadvisor"}) * on(namespace, pod) group_left(label_name) label_replace(kube_pod_labels{job="kube-state-metrics"}, "pod", "$1", "pod", "(.*)"))
      - record: namespace_name:kube_pod_container_resource_requests_memory_bytes:sum
        expr: sum by(namespace, label_name) (sum by(namespace, pod) (kube_pod_container_resource_requests_memory_bytes{job="kube-state-metrics"}) * on(namespace, pod) group_left(label_name) label_replace(kube_pod_labels{job="kube-state-metrics"}, "pod", "$1", "pod", "(.*)"))
      - record: namespace_name:kube_pod_container_resource_requests_cpu_cores:sum
        expr: sum by(namespace, label_name) (sum by(namespace, pod) (kube_pod_container_resource_requests_cpu_cores{job="kube-state-metrics"} and on(pod) kube_pod_status_scheduled{condition="true"}) * on(namespace, pod) group_left(label_name) label_replace(kube_pod_labels{job="kube-state-metrics"}, "pod", "$1", "pod", "(.*)"))
      - record: pod:consumed_cpu_requests:pct
        expr: sum by(pod, namespace) (label_replace(namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!="POD"}, "pod", "$1", "pod", "(.*)")) / sum by(pod, namespace) (kube_pod_container_resource_requests_cpu_cores) * 100
      - record: pod:consumed_memory_requests:pct
        expr: sum by(pod, namespace) (label_replace(container_memory_working_set_bytes{container!="",container!="POD"}, "pod", "$1", "pod", "(.*)")) / sum by(pod, namespace) (kube_pod_container_resource_requests_memory_bytes) * 100
      - record: pod_set:consumed_cpu_requests:quantile10
        expr: quantile by(pod_set, namespace) (10 / 100, label_replace(pod:consumed_cpu_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_memory_requests:quantile10
        expr: quantile by(pod_set, namespace) (10 / 100, label_replace(pod:consumed_memory_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_cpu_requests:quantile30
        expr: quantile by(pod_set, namespace) (30 / 100, label_replace(pod:consumed_cpu_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_memory_requests:quantile30
        expr: quantile by(pod_set, namespace) (30 / 100, label_replace(pod:consumed_memory_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_cpu_requests:quantile50
        expr: quantile by(pod_set, namespace) (50 / 100, label_replace(pod:consumed_cpu_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_memory_requests:quantile50
        expr: quantile by(pod_set, namespace) (50 / 100, label_replace(pod:consumed_memory_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_cpu_requests:quantile70
        expr: quantile by(pod_set, namespace) (70 / 100, label_replace(pod:consumed_cpu_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_memory_requests:quantile70
        expr: quantile by(pod_set, namespace) (70 / 100, label_replace(pod:consumed_memory_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_cpu_requests:quantile90
        expr: quantile by(pod_set, namespace) (90 / 100, label_replace(pod:consumed_cpu_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
      - record: pod_set:consumed_memory_requests:quantile90
        expr: quantile by(pod_set, namespace) (90 / 100, label_replace(pod:consumed_memory_requests:pct, "pod_set", "$1", "pod", "(.*)-\\w+"))
    - name: k8s.rules
      rules:
      - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
        expr: sum by(cluster,namespace, pod, container) (irate(container_cpu_usage_seconds_total{image!=""}[5m])) * on(cluster,namespace, pod) group_left(node) topk by(cluster,namespace, pod) (1, max by(cluster,namespace, pod, node) (kube_pod_info{node!=""}))
      - record: node_namespace_pod_container:container_memory_working_set_bytes
        expr: container_memory_working_set_bytes{image!="",job="kubelet",metrics_path="/metrics/cadvisor"} * on(namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=""}))
      - record: node_namespace_pod_container:container_memory_rss
        expr: container_memory_rss{image!="",job="kubelet",metrics_path="/metrics/cadvisor"} * on(namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=""}))
      - record: node_namespace_pod_container:container_memory_cache
        expr: container_memory_cache{image!="",job="kubelet",metrics_path="/metrics/cadvisor"} * on(namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=""}))
      - record: node_namespace_pod_container:container_memory_swap
        expr: container_memory_swap{image!="",job="kubelet",metrics_path="/metrics/cadvisor"} * on(namespace, pod) group_left(node) topk by(namespace, pod) (1, max by(namespace, pod, node) (kube_pod_info{node!=""}))
      - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_requests
        expr: kube_pod_container_resource_requests{job="kube-state-metrics",resource="memory"} * on(namespace, pod, cluster) group_left() max by(namespace, pod) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
      - record: namespace_memory:kube_pod_container_resource_requests:sum
        expr: sum by(namespace, cluster) (sum by(namespace, pod, cluster) (max by(namespace, pod, container, cluster) (kube_pod_container_resource_requests{job="kube-state-metrics",resource="memory"}) * on(namespace, pod, cluster) group_left() max by(namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
      - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests
        expr: kube_pod_container_resource_requests{job="kube-state-metrics",resource="cpu"} * on(namespace, pod, cluster) group_left() max by(namespace, pod) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
      - record: namespace_cpu:kube_pod_container_resource_requests:sum
        expr: sum by(namespace, cluster) (sum by(namespace, pod, cluster) (max by(namespace, pod, container, cluster) (kube_pod_container_resource_requests{job="kube-state-metrics",resource="cpu"}) * on(namespace, pod, cluster) group_left() max by(namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
      - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_limits
        expr: kube_pod_container_resource_limits{job="kube-state-metrics",resource="memory"} * on(namespace, pod, cluster) group_left() max by(namespace, pod) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
      - record: namespace_memory:kube_pod_container_resource_limits:sum
        expr: sum by(namespace, cluster) (sum by(namespace, pod, cluster) (max by(namespace, pod, container, cluster) (kube_pod_container_resource_limits{job="kube-state-metrics",resource="memory"}) * on(namespace, pod, cluster) group_left() max by(namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
      - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits
        expr: kube_pod_container_resource_limits{job="kube-state-metrics",resource="cpu"} * on(namespace, pod, cluster) group_left() max by(namespace, pod) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
      - record: namespace_cpu:kube_pod_container_resource_limits:sum
        expr: sum by(namespace, cluster) (sum by(namespace, pod, cluster) (max by(namespace, pod, container, cluster) (kube_pod_container_resource_limits{job="kube-state-metrics",resource="cpu"}) * on(namespace, pod, cluster) group_left() max by(namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
      - record: namespace_workload_pod:kube_pod_owner:relabel
        expr: max by(cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job="kube-state-metrics",owner_kind="ReplicaSet"}, "replicaset", "$1", "owner_name", "(.*)") * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (1, max by(replicaset, namespace, owner_name) (kube_replicaset_owner{job="kube-state-metrics"})), "workload", "$1", "owner_name", "(.*)"))
        labels:
          workload_type: deployment
      - record: kube_pod_info_node_count
        expr: sum(min by(cluster, node) (kube_pod_info))
