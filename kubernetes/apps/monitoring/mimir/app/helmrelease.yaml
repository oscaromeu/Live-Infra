---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mimir
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: mimir-distributed
      version: 5.0.0
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      # -- Definitions to set up nginx resolver
      dnsService: kube-dns
      dnsNamespace: kube-system
      clusterDomain: cluster.local
    alertmanager:
      persistentVolume:
        storageClass: local-path
        enabled: true
      replicas: 1
      resources:
        limits:
          memory: 1.4Gi
        requests:
          cpu: 1m
          memory: 100Mi
      statefulSet:
        enabled: true

    compactor:
      persistentVolume:
        size: 20Gi
        storageClass: local-path
      resources:
        limits:
          memory: 2.1Gi
        requests:
          cpu: 25m
          memory: 100Mi

    distributor:
      replicas: 2
      resources:
        limits:
          memory: 5.7Gi
        requests:
          cpu: 25m
          memory: 100Mi

    ingester:
      persistentVolume:
        size: 50Gi
        storageClass: local-path
      replicas: 3
      resources:
        limits:
          memory: 10Gi
        requests:
          cpu: 25m
          memory: 100Mi
      topologySpreadConstraints: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: target
                    operator: In
                    values:
                      - ingester
              topologyKey: 'kubernetes.io/hostname'

            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - ingester
              topologyKey: 'kubernetes.io/hostname'

    admin-cache:
      enabled: true
      replicas: 2

    chunks-cache:
      enabled: true
      replicas: 1

    index-cache:
      enabled: true
      replicas: 3

    metadata-cache:
      enabled: true

    results-cache:
      enabled: true
      replicas: 2

    minio:
      enabled: false

    overrides_exporter:
      replicas: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi

    querier:
      replicas: 3
      resources:
        limits:
          memory: 5.6Gi
        requests:
          cpu: 25m
          memory: 100Mi

    query_frontend:
      replicas: 1
      resources:
        limits:
          memory: 2.8Gi
        requests:
          cpu: 25m
          memory: 100Mi

    ruler:
      replicas: 1
      enabled: false
      resources:
        limits:
          memory: 2.8Gi
        requests:
          cpu: 25m
          memory: 100Mi

    store_gateway:
      replicas: 1
      persistentVolume:
        size: 10Gi
        storageClass: local-path
      resources:
        limits:
          memory: 2.1Gi
        requests:
          cpu: 25m
          memory: 100Mi
      topologySpreadConstraints: {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: target # support for enterprise.legacyLabels
                    operator: In
                    values:
                      - store-gateway
              topologyKey: 'kubernetes.io/hostname'

            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - store-gateway
              topologyKey: 'kubernetes.io/hostname'

    nginx:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
        hosts:
          - host: &host mimir.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
      replicas: 1
      resources:
        limits:
          memory: 731Mi
        requests:
          cpu: 25m
          memory: 100Mi

    # Grafana Enterprise Metrics feature related
    #admin_api:
    #  replicas: 1
    #  resources:
    #    limits:
    #      memory: 128Mi
    #    requests:
    #      cpu: 100m
    #      memory: 64Mi

    metaMonitoring:
      serviceMonitor:
        enabled: true
        interval: 1m
        scrapeTimeout: 30s

    gateway:
      replicas: 1
      resources:
        limits:
          memory: 731Mi
        requests:
          cpu: 25m
          memory: 100Mi
    mimir:
      structuredConfig:

        alertmanager_storage:
          backend: s3
          s3:
            insecure: false
            http:
              insecure_skip_verify: true

        # Blocks storage requires a prefix when using a common object storage bucket.
        blocks_storage:
          storage_prefix: blocks
          tsdb:
            dir: /data/tsdb
          backend: s3
          s3:
            insecure: false
            http:
              insecure_skip_verify: true

          #bucket_store:
          #  chunks_cache:
          #    backend: redis
          #    redis:
          #      endpoint: redis-master.datahub.svc.cluster.local:6379
          #      db: 2
          #  index_cache:
          #    backend: redis
          #    redis:
          #      endpoint: redis-master.datahub.svc.cluster.local:6379
          #      db: 2
          #  metadata_cache:
          #    backend: redis
          #    redis:
          #      endpoint: redis-master.datahub.svc.cluster.local:6379
          #      db: 2

        frontend:
          cache_results: true
          parallelize_shardable_queries: true
          query_sharding_target_series_per_shard: 2500
          split_queries_by_interval: 24h
          align_queries_with_step: true
          log_queries_longer_than: 1s
          #results_cache:
          #  backend: redis
          #  redis:
          #    endpoint: redis-master.datahub.svc.cluster.local:6379
          #    db: 2

        ruler_storage:
          backend: s3
          s3:
            insecure: false
            http:
              insecure_skip_verify: true

        limits:
          compactor_blocks_retention_period: 1y
          max_label_names_per_series: 120
          max_global_series_per_user: 12000000
          ingestion_rate: 400000
          ingestion_burst_size: 8000000

  valuesFrom:
    - targetPath: mimir.structuredConfig.alertmanager_storage.s3.bucket_name
      name: mimir-ruler
      kind: Secret
      valuesKey: BUCKET_NAME
    - targetPath: mimir.structuredConfig.alertmanager_storage.s3.endpoint
      name: mimir-ruler
      kind: Secret
      valuesKey: BUCKET_HOST
    - targetPath: mimir.structuredConfig.alertmanager_storage.s3.access_key_id
      name: minio-access-key-id
      kind: Secret
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: mimir.structuredConfig.alertmanager_storage.s3.secret_access_key
      name: minio-secret-key
      kind: Secret
      valuesKey: AWS_SECRET_ACCESS_KEY
    - targetPath: mimir.structuredConfig.ruler_storage.s3.bucket_name
      name: mimir-ruler
      kind: Secret
      valuesKey: BUCKET_NAME
    - targetPath: mimir.structuredConfig.ruler_storage.s3.endpoint
      name: mimir-ruler
      kind: Secret
      valuesKey: BUCKET_HOST
    - targetPath: mimir.structuredConfig.ruler_storage.s3.access_key_id
      name: minio-access-key-id
      kind: Secret
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: mimir.structuredConfig.ruler_storage.s3.secret_access_key
      name: minio-secret-key
      kind: Secret
      valuesKey: AWS_SECRET_ACCESS_KEY
    - targetPath: mimir.structuredConfig.blocks_storage.s3.bucket_name
      name: mimir-tsdb
      kind: Secret
      valuesKey: BUCKET_NAME
    - targetPath: mimir.structuredConfig.blocks_storage.s3.endpoint
      name: mimir-tsdb
      kind: Secret
      valuesKey: BUCKET_HOST
    - targetPath: mimir.structuredConfig.blocks_storage.s3.access_key_id
      name: minio-access-key-id
      kind: Secret
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: mimir.structuredConfig.blocks_storage.s3.secret_access_key
      name: minio-secret-key
      kind: Secret
      valuesKey: AWS_SECRET_ACCESS_KEY
