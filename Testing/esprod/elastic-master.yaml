---
kind: Service
apiVersion: v1
metadata:
  name: elastic-prod-master
  namespace: monitoring
  labels:
    app: "elastic-prod-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "elastic-prod-master"
    app: "elastic-prod-master"
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
kind: Service
apiVersion: v1
metadata:
  name: elastic-prod-master-headless
  namespace: monitoring
  labels:
    app: "elastic-prod-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elastic-prod-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elastic-prod-master
  namespace: monitoring
  labels:
    app: "elastic-prod-master"
spec:
  serviceName: elastic-prod-master-headless
  selector:
    matchLabels:
      app: "elastic-prod-master"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elastic-prod-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  template:
    metadata:
      name: "elastic-prod-master"
      namespace: monitoring
      labels:
        app: "elastic-prod-master"
      annotations:
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elastic-prod-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elastic-certificates-volumes 
          secret:
            secretName: elastic-certificates 
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.15.0"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}
      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.15.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 512Mi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elastic-prod-master-0"
          - name: node.roles
            value: "master,data_hot,data_content"
          - name: node.attr.type
            value: "hot"
          - name: discovery.seed_hosts
            value: "elastic-prod-master-headless"
          - name: cluster.name
            value: "logging"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-master-credentials
                key: password
          # will prevent the virtual address space (on Linux distribution) to run into errors or exceptions 
          # because this default configuration is too low. 
          - name: node.store.allow_mmap
            value: "false"
          # Makes sure that Elasticsearch allocates primary and replica shards to pods running on different Kubernetes nodes 
          # and never to pods that are scheduled onto a single Kubernetes node
          #          - name: cluster.routing.allocation.awareness.attributes
          #            value: "k8s_node_name"
          # XPack security configuration
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.keystore.path
            value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
          - name: xpack.security.transport.ssl.truststore.path
            value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.truststore.path
            value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
          - name: xpack.security.http.ssl.keystore.path
            value: "/usr/share/elasticsearch/config/certs/elastic-certificates.p12"
          # XPack - Monitoring configuration
          - name: xpack.monitoring.enabled 
            value: "true"
          - name: xpack.monitoring.collection.cluster.stats.timeout
            value: "10m"
          - name: xpack.monitoring.collection.index.recovery.active_only
            value: "false"
          - name: xpack.monitoring.collection.index.recovery.timeout
            value: "10m"
          - name: xpack.monitoring.collection.index.stats.timeout
            value: "10m"
          - name: xpack.monitoring.collection.indices
            value: "'*'"
          - name: xpack.monitoring.collection.interval
            value: "60s"
          - name: xpack.monitoring.history.duration
            value: "30d"
        volumeMounts:
          - name: "elastic-prod-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elastic-certificates-volumes
            mountPath: "/usr/share/elasticsearch/config/certs"
